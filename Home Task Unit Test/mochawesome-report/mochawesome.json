{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-27T09:53:46.677Z",
    "end": "2023-09-27T09:53:46.712Z",
    "duration": 35,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ec0afb8a-dd9f-4425-8714-3c3d30bd92de",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "71698b2f-f08f-4d59-a921-a5a00d3336eb",
          "title": "isNumberEven Positive Test",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/isNumberEven.spec.js",
          "file": "/test/NumbersValidator/isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven Positive Test\"",
              "fullTitle": "isNumberEven Positive Test \"before each\" hook in \"isNumberEven Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "982623b3-edb8-4b3e-90d4-54fc8fd43d53",
              "parentUUID": "71698b2f-f08f-4d59-a921-a5a00d3336eb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven Positive Test\"",
              "fullTitle": "isNumberEven Positive Test \"after each\" hook in \"isNumberEven Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "1f580253-53ba-4212-bfcc-c4e08197204b",
              "parentUUID": "71698b2f-f08f-4d59-a921-a5a00d3336eb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should return true when provided whit positive even number",
              "fullTitle": "isNumberEven Positive Test It should return true when provided whit positive even number",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var range = 1000\nvar number = Math.floor( Math.random() * range / 2 ) * 2;\nconst validatorResult = validator.isNumberEven(number)\nexpect(validatorResult).to.be.equal(true);",
              "err": {},
              "uuid": "b8361db6-cc8a-48ff-9d86-0fda5e9c5afb",
              "parentUUID": "71698b2f-f08f-4d59-a921-a5a00d3336eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false when provided whit positive odd number",
              "fullTitle": "isNumberEven Positive Test It should return false when provided whit positive odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var range = 1000\nvar number = (Math.floor( Math.random() * range / 2 ) * 2) + 1;\nconst validatorResult = validator.isNumberEven(number)\nexpect(validatorResult).to.be.equal(false);",
              "err": {},
              "uuid": "49bb0a1e-9489-47db-b44c-b8424ffc0bec",
              "parentUUID": "71698b2f-f08f-4d59-a921-a5a00d3336eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false  when provided whit number zero",
              "fullTitle": "isNumberEven Positive Test It should return false  when provided whit number zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isNumberEven(0)\nexpect(validatorResult).to.be.equal(true);",
              "err": {},
              "uuid": "c2a733cb-6ad9-4939-b300-d74d1c893db6",
              "parentUUID": "71698b2f-f08f-4d59-a921-a5a00d3336eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when provided whit negativ even number",
              "fullTitle": "isNumberEven Positive Test It should return true when provided whit negativ even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var range = 1000\nvar number = 0 - Math.floor( Math.random() * range / 2 ) * 2;\nconst validatorResult = validator.isNumberEven(number)\nexpect(validatorResult).to.be.equal(true);",
              "err": {},
              "uuid": "782039d2-f11f-4d7b-a827-aac5b957770e",
              "parentUUID": "71698b2f-f08f-4d59-a921-a5a00d3336eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false when provided whit negative odd number",
              "fullTitle": "isNumberEven Positive Test It should return false when provided whit negative odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var range = 1000\nvar number = 0 - (Math.floor( Math.random() * range / 2 ) * 2) + 1;\nconst validatorResult = validator.isNumberEven(number)\nexpect(validatorResult).to.be.equal(false);",
              "err": {},
              "uuid": "39e87589-8edb-4d62-b49a-36021e3933e9",
              "parentUUID": "71698b2f-f08f-4d59-a921-a5a00d3336eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8361db6-cc8a-48ff-9d86-0fda5e9c5afb",
            "49bb0a1e-9489-47db-b44c-b8424ffc0bec",
            "c2a733cb-6ad9-4939-b300-d74d1c893db6",
            "782039d2-f11f-4d7b-a827-aac5b957770e",
            "39e87589-8edb-4d62-b49a-36021e3933e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "913351c7-e641-45f8-8a85-1923be798cf1",
          "title": "isNumber Negative Testing",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/isNumberEven.spec.js",
          "file": "/test/NumbersValidator/isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumber Negative Testing\"",
              "fullTitle": "isNumber Negative Testing \"before each\" hook in \"isNumber Negative Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "43de3fe3-1fd5-4ad2-b309-985843b597cc",
              "parentUUID": "913351c7-e641-45f8-8a85-1923be798cf1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumber Negative Testing\"",
              "fullTitle": "isNumber Negative Testing \"after each\" hook in \"isNumber Negative Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "1c76e89c-f4a5-4c94-bfbb-a47509200715",
              "parentUUID": "913351c7-e641-45f8-8a85-1923be798cf1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should throw an error message when provided with string",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>{\n  validator.isNumberEven('Hello World');\n}).to.throw('[Hello World] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "de3c54b8-a865-4f47-b8b2-91145fdb0b6d",
              "parentUUID": "913351c7-e641-45f8-8a85-1923be798cf1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error message when provided with number as string",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with number as string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>{\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "17b7f4bd-3001-4b47-a878-69d69adec02c",
              "parentUUID": "913351c7-e641-45f8-8a85-1923be798cf1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error message when provided with array",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>{\n  validator.isNumberEven([1,2,3,4]);\n}).to.throw('[1,2,3,4] is not of type \"Number\" it is of type \"object\"');",
              "err": {},
              "uuid": "e2be05b7-38d2-4c3f-994f-3f1e02c21c35",
              "parentUUID": "913351c7-e641-45f8-8a85-1923be798cf1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de3c54b8-a865-4f47-b8b2-91145fdb0b6d",
            "17b7f4bd-3001-4b47-a878-69d69adec02c",
            "e2be05b7-38d2-4c3f-994f-3f1e02c21c35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
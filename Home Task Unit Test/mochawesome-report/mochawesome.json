{
  "stats": {
    "suites": 8,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-27T17:05:20.885Z",
    "end": "2023-09-27T17:05:20.928Z",
    "duration": 43,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8f67933e-4d75-4bd7-9295-e412a55a0a20",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
          "title": "getEvenNumbersFromArray Positive Test",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/getEvenNumbersFromArray.spec.js",
          "file": "/test/NumbersValidator/getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray Positive Test\"",
              "fullTitle": "getEvenNumbersFromArray Positive Test \"before each\" hook in \"getEvenNumbersFromArray Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "2eecae4a-7bc2-4e6c-b126-ba18e04bd53e",
              "parentUUID": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray Positive Test\"",
              "fullTitle": "getEvenNumbersFromArray Positive Test \"after each\" hook in \"getEvenNumbersFromArray Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "ae26114b-dfc4-44bc-8350-1db634a527c3",
              "parentUUID": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should return an array of even numbers",
              "fullTitle": "getEvenNumbersFromArray Positive Test It should return an array of even numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [2, 6, 11, 22];\nconst evenNumbersArray = validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbersArray).to.be.eql([2, 6, 22]);",
              "err": {},
              "uuid": "5d536d6c-28e3-40e6-ad9f-c52070a654e5",
              "parentUUID": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return an empty array if  there is no even number in the array ",
              "fullTitle": "getEvenNumbersFromArray Positive Test It should return an empty array if  there is no even number in the array ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [1, 3, 11, 21];\nconst evenNumbersArray = validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbersArray).to.be.eql([]);",
              "err": {},
              "uuid": "f31bc4ac-62dc-4526-aab2-67ef17d6f089",
              "parentUUID": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return an array of \"zero\" if provided by an array full of \"zero\"",
              "fullTitle": "getEvenNumbersFromArray Positive Test It should return an array of \"zero\" if provided by an array full of \"zero\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [0, 0, 0, 0];\nconst evenNumbersArray = validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbersArray).to.be.eql([0, 0, 0, 0]);",
              "err": {},
              "uuid": "b887249e-7e03-4883-9486-baa4c0152b57",
              "parentUUID": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return an array of even numbers if negativ numbers provided",
              "fullTitle": "getEvenNumbersFromArray Positive Test It should return an array of even numbers if negativ numbers provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [-2, 6, 11, -22];\nconst evenNumbersArray = validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbersArray).to.be.eql([-2, 6, -22]);",
              "err": {},
              "uuid": "582f1150-fe8a-4bdc-a38c-079eb56cea19",
              "parentUUID": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return an empty array when the provided array is empty",
              "fullTitle": "getEvenNumbersFromArray Positive Test It should return an empty array when the provided array is empty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.getEvenNumbersFromArray([]);\nexpect(validatorResult).to.deep.equal([]);",
              "err": {},
              "uuid": "67ce6910-7b7c-42fe-9373-8a9f4128212f",
              "parentUUID": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return an array with a single even number",
              "fullTitle": "getEvenNumbersFromArray Positive Test It should return an array with a single even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.getEvenNumbersFromArray([2]);\nexpect(validatorResult).to.be.eql([2]);",
              "err": {},
              "uuid": "08c251bb-2212-4fbf-bdc3-64091c0b0b9a",
              "parentUUID": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return an empty array when input contains only non-integer numbers",
              "fullTitle": "getEvenNumbersFromArray Positive Test It should return an empty array when input contains only non-integer numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.getEvenNumbersFromArray([1.5, 2.5, 3.5, 4.5]);\nexpect(validatorResult).to.be.eql([]);",
              "err": {},
              "uuid": "65061352-b61b-4055-a732-d143b8e5660d",
              "parentUUID": "f8186bdc-85d1-4d66-8dbd-04f0c1ffa104",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d536d6c-28e3-40e6-ad9f-c52070a654e5",
            "f31bc4ac-62dc-4526-aab2-67ef17d6f089",
            "b887249e-7e03-4883-9486-baa4c0152b57",
            "582f1150-fe8a-4bdc-a38c-079eb56cea19",
            "67ce6910-7b7c-42fe-9373-8a9f4128212f",
            "08c251bb-2212-4fbf-bdc3-64091c0b0b9a",
            "65061352-b61b-4055-a732-d143b8e5660d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "723e1856-66d4-46ef-b3fc-abf77705fcfa",
          "title": "getEvenNumbersFromArray Negativ Test",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/getEvenNumbersFromArray.spec.js",
          "file": "/test/NumbersValidator/getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray Negativ Test\"",
              "fullTitle": "getEvenNumbersFromArray Negativ Test \"before each\" hook in \"getEvenNumbersFromArray Negativ Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "0fbba607-e185-4e65-99cc-cdd6855c5a69",
              "parentUUID": "723e1856-66d4-46ef-b3fc-abf77705fcfa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray Negativ Test\"",
              "fullTitle": "getEvenNumbersFromArray Negativ Test \"after each\" hook in \"getEvenNumbersFromArray Negativ Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "526376d0-62fc-4d36-bf3a-710afb366a22",
              "parentUUID": "723e1856-66d4-46ef-b3fc-abf77705fcfa",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should throw an error if array is not full of numbers",
              "fullTitle": "getEvenNumbersFromArray Negativ Test It should throw an error if array is not full of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = [5, '2', 11, 22];\nexpect(() => {\n  validator.getEvenNumbersFromArray(arrayOfValues);\n}).to.throw('[5,2,11,22] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "d438fce4-cc09-43be-af48-6d134073f5f1",
              "parentUUID": "723e1856-66d4-46ef-b3fc-abf77705fcfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error if there is no number in the array ",
              "fullTitle": "getEvenNumbersFromArray Negativ Test It should throw an error if there is no number in the array ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = ['a', '2', 'c', 'G'];\nexpect(() => {\n  validator.getEvenNumbersFromArray(arrayOfValues);\n}).to.throw('[a,2,c,G] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "856e5d05-35b4-49d8-a7ed-76f4776810a6",
              "parentUUID": "723e1856-66d4-46ef-b3fc-abf77705fcfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error if not provided an array ",
              "fullTitle": "getEvenNumbersFromArray Negativ Test It should throw an error if not provided an array ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = 'Its a string';\nexpect(() => {\n  validator.getEvenNumbersFromArray(arrayOfValues);\n}).to.throw('[Its a string] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "10a80c95-3cf8-49cb-b372-8f461490a80a",
              "parentUUID": "723e1856-66d4-46ef-b3fc-abf77705fcfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error for an input array containing mixed types",
              "fullTitle": "getEvenNumbersFromArray Negativ Test It should throw an error for an input array containing mixed types",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = [1, '2', 3, null];\nexpect(() => {\n  validator.getEvenNumbersFromArray(arrayOfValues);\n}).to.throw('[1,2,3,] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "0a87bd54-e268-4e3d-8187-30f1bf85dd24",
              "parentUUID": "723e1856-66d4-46ef-b3fc-abf77705fcfa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d438fce4-cc09-43be-af48-6d134073f5f1",
            "856e5d05-35b4-49d8-a7ed-76f4776810a6",
            "10a80c95-3cf8-49cb-b372-8f461490a80a",
            "0a87bd54-e268-4e3d-8187-30f1bf85dd24"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
          "title": "isAllNumbers Positive Test",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/isAllNumbers.spec.js",
          "file": "/test/NumbersValidator/isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers Positive Test\"",
              "fullTitle": "isAllNumbers Positive Test \"before each\" hook in \"isAllNumbers Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "86f875c1-a796-46a3-a057-77fd71931992",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers Positive Test\"",
              "fullTitle": "isAllNumbers Positive Test \"after each\" hook in \"isAllNumbers Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "c5f4492c-117d-4483-8ee1-4359f39b1fb8",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should return true when provided array of numbers",
              "fullTitle": "isAllNumbers Positive Test It should return true when provided array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [2, 6, 11, 22];\nconst evenNumbersArray = validator.isAllNumbers(arrayOfNumbers);\nexpect(evenNumbersArray).to.be.eql(true);",
              "err": {},
              "uuid": "206580fd-b050-4fae-9fbc-359db41bd8a8",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when provided of array of zero",
              "fullTitle": "isAllNumbers Positive Test It should return true when provided of array of zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [0, 0, 0, 0];\nconst evenNumbersArray = validator.isAllNumbers(arrayOfNumbers);\nexpect(evenNumbersArray).to.be.eql(true);",
              "err": {},
              "uuid": "1e50dfe9-faf2-4709-aab8-801b5bfed49a",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when provided with negativ numbers array",
              "fullTitle": "isAllNumbers Positive Test It should return true when provided with negativ numbers array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [-2, -6, -11, -22];\nconst evenNumbersArray = validator.isAllNumbers(arrayOfNumbers);\nexpect(evenNumbersArray).to.be.eql(true);",
              "err": {},
              "uuid": "95da9689-26cc-4710-a476-c2aeeee72382",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when provided whit empty array",
              "fullTitle": "isAllNumbers Positive Test It should return true when provided whit empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isAllNumbers([]);\nexpect(validatorResult).to.deep.eql(true);",
              "err": {},
              "uuid": "390ee657-3003-432d-ae57-4f158204a60a",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when all elements in the array are floating-point numbers",
              "fullTitle": "isAllNumbers Positive Test It should return true when all elements in the array are floating-point numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isAllNumbers([1.5, 2.25, 3.75]);\nexpect(validatorResult).to.eql(true);",
              "err": {},
              "uuid": "4d167907-9b7a-44ec-aa6e-690fe2ee685e",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when the array contains only one number",
              "fullTitle": "isAllNumbers Positive Test It should return true when the array contains only one number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isAllNumbers([42]);\nexpect(validatorResult).to.eql(true);",
              "err": {},
              "uuid": "9664af11-70fe-44d0-a447-9baa5abec86f",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when at least one element in the array is Infinity",
              "fullTitle": "isAllNumbers Positive Test It should return true when at least one element in the array is Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = [1, 2, Infinity, 4];\nconst validatorResult = validator.isAllNumbers(arrayOfValues);\nexpect(validatorResult).to.eql(true);",
              "err": {},
              "uuid": "ce1c9d53-7bfe-438b-acfb-2856aa3843a3",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when at least one element in the array is NaN",
              "fullTitle": "isAllNumbers Positive Test It should return true when at least one element in the array is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = [1, 2, NaN, 4];\nconst validatorResult = validator.isAllNumbers(arrayOfValues);\nexpect(validatorResult).to.eql(true);",
              "err": {},
              "uuid": "41ee21c8-329a-4089-b047-07941a03ce34",
              "parentUUID": "1b4d5b64-e04d-44cd-bb7c-7cbde2b7fedb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "206580fd-b050-4fae-9fbc-359db41bd8a8",
            "1e50dfe9-faf2-4709-aab8-801b5bfed49a",
            "95da9689-26cc-4710-a476-c2aeeee72382",
            "390ee657-3003-432d-ae57-4f158204a60a",
            "4d167907-9b7a-44ec-aa6e-690fe2ee685e",
            "9664af11-70fe-44d0-a447-9baa5abec86f",
            "ce1c9d53-7bfe-438b-acfb-2856aa3843a3",
            "41ee21c8-329a-4089-b047-07941a03ce34"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9e943dae-e460-4dac-9b71-d6df24ff3c5d",
          "title": "isAllNumbers Negative Test",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/isAllNumbers.spec.js",
          "file": "/test/NumbersValidator/isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers Negative Test\"",
              "fullTitle": "isAllNumbers Negative Test \"before each\" hook in \"isAllNumbers Negative Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "fcd28aa6-21ed-4b47-8916-20a1ca8dc8a9",
              "parentUUID": "9e943dae-e460-4dac-9b71-d6df24ff3c5d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers Negative Test\"",
              "fullTitle": "isAllNumbers Negative Test \"after each\" hook in \"isAllNumbers Negative Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "536f78fc-85f9-4773-88f8-d0e71c096ced",
              "parentUUID": "9e943dae-e460-4dac-9b71-d6df24ff3c5d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should throw an error if not an array a string is provided",
              "fullTitle": "isAllNumbers Negative Test It should throw an error if not an array a string is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = 'Hello World';\nexpect(() => {\n  validator.isAllNumbers(arrayOfValues);\n}).to.throw('[Hello World] is not an array');",
              "err": {},
              "uuid": "c888905d-d3ff-4e67-9e7b-31e4b71327bd",
              "parentUUID": "9e943dae-e460-4dac-9b71-d6df24ff3c5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error if not an array ,a number is provided",
              "fullTitle": "isAllNumbers Negative Test It should throw an error if not an array ,a number is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = 2;\nexpect(() => {\n  validator.isAllNumbers(arrayOfValues);\n}).to.throw('[2] is not an array');",
              "err": {},
              "uuid": "7f3fb6f1-eabb-48b2-8298-c14567aea8dd",
              "parentUUID": "9e943dae-e460-4dac-9b71-d6df24ff3c5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false if array is not full of numbers",
              "fullTitle": "isAllNumbers Negative Test It should return false if array is not full of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = [2, '3', 4, 'banana'];\nconst validatorResult = validator.isAllNumbers(arrayOfValues);\nexpect(validatorResult).to.be.eql(false);",
              "err": {},
              "uuid": "c3985af3-bd30-41ce-a26f-ceee2faea3bc",
              "parentUUID": "9e943dae-e460-4dac-9b71-d6df24ff3c5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false when the array contains a null element",
              "fullTitle": "isAllNumbers Negative Test It should return false when the array contains a null element",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = [1, 2, 3, null];\nconst validatorResult = validator.isAllNumbers(arrayOfValues);\nexpect(validatorResult).to.eql(false);",
              "err": {},
              "uuid": "ed877bd6-e6b3-4ebc-97cb-298e2420f794",
              "parentUUID": "9e943dae-e460-4dac-9b71-d6df24ff3c5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false when the array contains an undefined element",
              "fullTitle": "isAllNumbers Negative Test It should return false when the array contains an undefined element",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = [1, 2, 3, undefined];\nconst validatorResult = validator.isAllNumbers(arrayOfValues);\nexpect(validatorResult).to.eql(false);",
              "err": {},
              "uuid": "bc887495-d9da-4b10-9101-f86e0ca19dde",
              "parentUUID": "9e943dae-e460-4dac-9b71-d6df24ff3c5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c888905d-d3ff-4e67-9e7b-31e4b71327bd",
            "7f3fb6f1-eabb-48b2-8298-c14567aea8dd",
            "c3985af3-bd30-41ce-a26f-ceee2faea3bc",
            "ed877bd6-e6b3-4ebc-97cb-298e2420f794",
            "bc887495-d9da-4b10-9101-f86e0ca19dde"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4334d2cb-8ae6-4e4e-afe4-7e56b278b202",
          "title": "isInteger Positive Test",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/isInteger.spec.js",
          "file": "/test/NumbersValidator/isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger Positive Test\"",
              "fullTitle": "isInteger Positive Test \"before each\" hook in \"isInteger Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "f11064f9-3635-4979-a1a8-d20c2abcccdd",
              "parentUUID": "4334d2cb-8ae6-4e4e-afe4-7e56b278b202",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger Positive Test\"",
              "fullTitle": "isInteger Positive Test \"after each\" hook in \"isInteger Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "47eea9e3-7557-4457-9f04-b40f7e4f76ca",
              "parentUUID": "4334d2cb-8ae6-4e4e-afe4-7e56b278b202",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should return true when provided with positive number",
              "fullTitle": "isInteger Positive Test It should return true when provided with positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const range = 1000;\nconst number = Math.floor((Math.random() * range) / 2) * 2;\nconst validatorResult = validator.isInteger(number);\nexpect(validatorResult).to.be.equal(true);",
              "err": {},
              "uuid": "3cad7bcd-ec50-461b-8ae4-bcc2b882ff80",
              "parentUUID": "4334d2cb-8ae6-4e4e-afe4-7e56b278b202",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when provided with negativ number",
              "fullTitle": "isInteger Positive Test It should return true when provided with negativ number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const range = 1000;\nconst number = 0 - (Math.floor((Math.random() * range) / 2) * 2);\nconst validatorResult = validator.isInteger(number);\nexpect(validatorResult).to.be.equal(true);",
              "err": {},
              "uuid": "3a4533b4-90db-47a8-a088-e1cae98705f5",
              "parentUUID": "4334d2cb-8ae6-4e4e-afe4-7e56b278b202",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when provided with Zero",
              "fullTitle": "isInteger Positive Test It should return true when provided with Zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isInteger(0);\nexpect(validatorResult).to.be.equal(true);",
              "err": {},
              "uuid": "284353b8-29fd-4911-9d12-168a9f2d76d3",
              "parentUUID": "4334d2cb-8ae6-4e4e-afe4-7e56b278b202",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3cad7bcd-ec50-461b-8ae4-bcc2b882ff80",
            "3a4533b4-90db-47a8-a088-e1cae98705f5",
            "284353b8-29fd-4911-9d12-168a9f2d76d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb1974de-f8be-4be9-a74f-54223062e234",
          "title": "isInteger Negativ Test",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/isInteger.spec.js",
          "file": "/test/NumbersValidator/isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger Negativ Test\"",
              "fullTitle": "isInteger Negativ Test \"before each\" hook in \"isInteger Negativ Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "76881d07-4d99-415b-86a0-82a932084e3d",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger Negativ Test\"",
              "fullTitle": "isInteger Negativ Test \"after each\" hook in \"isInteger Negativ Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "101dfce9-6b3e-4dcd-9630-f8914ffb1102",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should return false when provided with positive decimal number",
              "fullTitle": "isInteger Negativ Test It should return false when provided with positive decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isInteger(0.5);\nexpect(validatorResult).to.be.equal(false);",
              "err": {},
              "uuid": "38627007-5199-4fd6-8d21-144fc1cdf8c7",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false when provided with negativ decimal number",
              "fullTitle": "isInteger Negativ Test It should return false when provided with negativ decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isInteger(-124.1);\nexpect(validatorResult).to.be.equal(false);",
              "err": {},
              "uuid": "713a62c0-c508-4d92-bcb5-b5cb2d188d54",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error when provided with a string",
              "fullTitle": "isInteger Negativ Test It should throw an error when provided with a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('banana');\n}).to.throw('[banana] is not a number');",
              "err": {},
              "uuid": "5b8e5ec1-08d0-404b-ba16-aa4685596d0e",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error when provided with a object",
              "fullTitle": "isInteger Negativ Test It should throw an error when provided with a object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger({});\n}).to.throw('[[object Object]] is not a number');",
              "err": {},
              "uuid": "bec03f28-91e5-4c06-9550-e95cc31a3e98",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error when provided with a array",
              "fullTitle": "isInteger Negativ Test It should throw an error when provided with a array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger([]);\n}).to.throw('[] is not a number');",
              "err": {},
              "uuid": "7ff6d964-f760-4272-9e82-b4b5c28c1353",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false when provided with Infinity",
              "fullTitle": "isInteger Negativ Test It should return false when provided with Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isInteger(Infinity);\nexpect(validatorResult).to.be.equal(false);",
              "err": {},
              "uuid": "f6fe67aa-e077-4997-8e48-950ae0e6b3b8",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when provided with NaN",
              "fullTitle": "isInteger Negativ Test It should return true when provided with NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isInteger(NaN);\nexpect(validatorResult).to.be.equal(false);",
              "err": {},
              "uuid": "3d8d24f5-9f9d-42fc-a989-3ff982871b2e",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error when provided with a null",
              "fullTitle": "isInteger Negativ Test It should throw an error when provided with a null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger([]);\n}).to.throw('[] is not a number');",
              "err": {},
              "uuid": "e1a545a0-0768-48f3-9484-2ca2fc8425c2",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error when provided with a undefined",
              "fullTitle": "isInteger Negativ Test It should throw an error when provided with a undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger([]);\n}).to.throw('[] is not a number');",
              "err": {},
              "uuid": "6f5078c3-a074-4e29-93af-c846022562f1",
              "parentUUID": "bb1974de-f8be-4be9-a74f-54223062e234",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38627007-5199-4fd6-8d21-144fc1cdf8c7",
            "713a62c0-c508-4d92-bcb5-b5cb2d188d54",
            "5b8e5ec1-08d0-404b-ba16-aa4685596d0e",
            "bec03f28-91e5-4c06-9550-e95cc31a3e98",
            "7ff6d964-f760-4272-9e82-b4b5c28c1353",
            "f6fe67aa-e077-4997-8e48-950ae0e6b3b8",
            "3d8d24f5-9f9d-42fc-a989-3ff982871b2e",
            "e1a545a0-0768-48f3-9484-2ca2fc8425c2",
            "6f5078c3-a074-4e29-93af-c846022562f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "630ed038-7c08-4ba4-bcf9-b51fed39157e",
          "title": "isNumberEven Positive Test",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/isNumberEven.spec.js",
          "file": "/test/NumbersValidator/isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven Positive Test\"",
              "fullTitle": "isNumberEven Positive Test \"before each\" hook in \"isNumberEven Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "bedaaad5-954f-4fee-acd4-34d16ee2e3bb",
              "parentUUID": "630ed038-7c08-4ba4-bcf9-b51fed39157e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven Positive Test\"",
              "fullTitle": "isNumberEven Positive Test \"after each\" hook in \"isNumberEven Positive Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "ea01a4ec-d2b8-4e2f-8ece-b7f1ef8fa025",
              "parentUUID": "630ed038-7c08-4ba4-bcf9-b51fed39157e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should return true when provided whit positive even number",
              "fullTitle": "isNumberEven Positive Test It should return true when provided whit positive even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const range = 1000;\nconst number = Math.floor(((Math.random() * range) / 2)) * 2;\nconst validatorResult = validator.isNumberEven(number);\nexpect(validatorResult).to.be.equal(true);",
              "err": {},
              "uuid": "8d81e1e5-ed36-4121-8590-a5b989b84d78",
              "parentUUID": "630ed038-7c08-4ba4-bcf9-b51fed39157e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false when provided whit positive odd number",
              "fullTitle": "isNumberEven Positive Test It should return false when provided whit positive odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const range = 1000;\nconst number = (Math.floor(((Math.random() * range) / 2)) * 2) + 1;\nconst validatorResult = validator.isNumberEven(number);\nexpect(validatorResult).to.be.equal(false);",
              "err": {},
              "uuid": "bffb0bfd-b106-4ac5-bf8e-7b56b238955b",
              "parentUUID": "630ed038-7c08-4ba4-bcf9-b51fed39157e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false  when provided whit number zero",
              "fullTitle": "isNumberEven Positive Test It should return false  when provided whit number zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isNumberEven(0);\nexpect(validatorResult).to.be.equal(true);",
              "err": {},
              "uuid": "3ff96c1a-58f4-40fc-a6ba-86ebb1ea4be8",
              "parentUUID": "630ed038-7c08-4ba4-bcf9-b51fed39157e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true when provided whit negativ even number",
              "fullTitle": "isNumberEven Positive Test It should return true when provided whit negativ even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const range = 1000;\nconst number = 0 - (Math.floor((Math.random() * range) / 2)) * 2;\nconst validatorResult = validator.isNumberEven(number);\nexpect(validatorResult).to.be.equal(true);",
              "err": {},
              "uuid": "143f4984-0d8d-43a8-831e-d8f1af47ef3e",
              "parentUUID": "630ed038-7c08-4ba4-bcf9-b51fed39157e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false when provided whit negative odd number",
              "fullTitle": "isNumberEven Positive Test It should return false when provided whit negative odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const range = 1000;\nconst number = 0 - (Math.floor(((Math.random() * range) / 2)) * 2) + 1;\nconst validatorResult = validator.isNumberEven(number);\nexpect(validatorResult).to.be.equal(false);",
              "err": {},
              "uuid": "1e32fb50-6f6b-409c-920e-9b0aafc0897b",
              "parentUUID": "630ed038-7c08-4ba4-bcf9-b51fed39157e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return true for positive decimal even numbers",
              "fullTitle": "isNumberEven Positive Test It should return true for positive decimal even numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isNumberEven(4.0);\nexpect(validatorResult).to.equal(true);",
              "err": {},
              "uuid": "13572562-6030-4c5c-a4dc-35200d07f311",
              "parentUUID": "630ed038-7c08-4ba4-bcf9-b51fed39157e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d81e1e5-ed36-4121-8590-a5b989b84d78",
            "bffb0bfd-b106-4ac5-bf8e-7b56b238955b",
            "3ff96c1a-58f4-40fc-a6ba-86ebb1ea4be8",
            "143f4984-0d8d-43a8-831e-d8f1af47ef3e",
            "1e32fb50-6f6b-409c-920e-9b0aafc0897b",
            "13572562-6030-4c5c-a4dc-35200d07f311"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4d176acd-7ec4-4171-a091-f1cefa38539d",
          "title": "isNumber Negative Testing",
          "fullFile": "/root/CRE_Automated_Testing_Basics_in_JavaScript_Unit_Test/CRE_Automated_Testing_Basics_in_JavaScript/Home Task Unit Test/test/NumbersValidator/isNumberEven.spec.js",
          "file": "/test/NumbersValidator/isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumber Negative Testing\"",
              "fullTitle": "isNumber Negative Testing \"before each\" hook in \"isNumber Negative Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "31d011a0-6847-4654-a1b9-c13756a72766",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumber Negative Testing\"",
              "fullTitle": "isNumber Negative Testing \"after each\" hook in \"isNumber Negative Testing\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "08d93341-a758-461f-bc8d-4106dcd43b4d",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "It should throw an error message when provided with string",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('Hello World');\n}).to.throw('[Hello World] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "8548e865-4698-49f2-b45d-7b9900b5ef26",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error message when provided with number as string",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with number as string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "fe2f45fe-a72c-49d8-ae59-3c09f0ee7268",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error message when provided with array",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven([1, 2, 3, 4]);\n}).to.throw('[1,2,3,4] is not of type \"Number\" it is of type \"object\"');",
              "err": {},
              "uuid": "cd3b387c-3f08-4f7d-be13-01d20ad5b845",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error message when provided with Null",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with Null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(null);\n}).to.throw('[null] is not of type \"Number\" it is of type \"object\"');",
              "err": {},
              "uuid": "aea1566e-01f2-412a-a2dd-0c828e2e3d3c",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error message when provided with undefined",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(undefined);\n}).to.throw('[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "5faaa1db-5ef0-493e-a838-32553b89fa31",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error message when provided with Nan",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with Nan",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isNumberEven(NaN);\nexpect(validatorResult).to.deep.eql(false);",
              "err": {},
              "uuid": "39c3bc21-bd18-4ee6-8081-ba779a073079",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false for positive decimal odd numbers",
              "fullTitle": "isNumber Negative Testing It should return false for positive decimal odd numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isNumberEven(3.5);\nexpect(validatorResult).to.equal(false);",
              "err": {},
              "uuid": "114b8146-94e9-4fdf-a6bf-e9e8d8a35b07",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false for Infinity",
              "fullTitle": "isNumber Negative Testing It should return false for Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isNumberEven(Infinity);\nexpect(validatorResult).to.equal(false);",
              "err": {},
              "uuid": "26e80b13-7609-48ad-9946-1668b99e63a9",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return false for negativ Infinity",
              "fullTitle": "isNumber Negative Testing It should return false for negativ Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatorResult = validator.isNumberEven(-Infinity);\nexpect(validatorResult).to.equal(false);",
              "err": {},
              "uuid": "e6fa4fdf-eb5c-4094-8313-dc9c33f041b4",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error message when provided with empty array",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven([]);\n}).to.throw('[] is not of type \"Number\" it is of type \"object\"');",
              "err": {},
              "uuid": "f1a5a211-bfe8-418d-8fa8-a9a5298694e6",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should throw an error message when provided with empty object",
              "fullTitle": "isNumber Negative Testing It should throw an error message when provided with empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven({});\n}).to.throw('[[object Object]] is not of type \"Number\" it is of type \"object\"');",
              "err": {},
              "uuid": "541e8ad3-3371-41d3-9dc4-6b8813ddf9a0",
              "parentUUID": "4d176acd-7ec4-4171-a091-f1cefa38539d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8548e865-4698-49f2-b45d-7b9900b5ef26",
            "fe2f45fe-a72c-49d8-ae59-3c09f0ee7268",
            "cd3b387c-3f08-4f7d-be13-01d20ad5b845",
            "aea1566e-01f2-412a-a2dd-0c828e2e3d3c",
            "5faaa1db-5ef0-493e-a838-32553b89fa31",
            "39c3bc21-bd18-4ee6-8081-ba779a073079",
            "114b8146-94e9-4fdf-a6bf-e9e8d8a35b07",
            "26e80b13-7609-48ad-9946-1668b99e63a9",
            "e6fa4fdf-eb5c-4094-8313-dc9c33f041b4",
            "f1a5a211-bfe8-418d-8fa8-a9a5298694e6",
            "541e8ad3-3371-41d3-9dc4-6b8813ddf9a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}